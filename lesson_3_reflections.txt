When would you want to use a remote repository rather than keeping all your work
local?

        Having a stable remote repository allows you to make a backup of the whole your project, 
        so in case of emergency you can always restore your data. Also having remotes allows 
        you to collaborate with others more efficiently.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

	Manual pulling gives you more control over your local files. Automatic pulling may 
	also suddenly break your code. For example, you write a module that depends on another 
	one, and someone, who was developing or supporting the second one broke it or introduced 
	a bug. Then your work may stop until the problem is resolved.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

	Forks are needed to show that your repo is a clone af another one existing in GitHub.
	Clones are the repos you copied from one place to another. Fork extends clone.
	Branches save all the commits before the branch was created, but it stays in the same
	project - it is used to implement something new or fix old in the same project.
	Summary: forks are needed for improving other projects not of yours, clones are 
	needed to have an opportunity to work in the forest, branches are required to
	implement new logical stage of the one project you own.

What is the benefit of having a copy of the last known state of the remote
stored locally?

	You can compare the two states of the local and the remote to see what changed.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

	When I was collaborating with someone without version control, it was in a really different way.
	Firstly we met each other in some room and segmented a task. Then we spdreaded these tasks among
	everyone. We worked on single own parts, trying not to interfere. Then we were building the project
	from the parts we made. But having the version control makes these procceses much faster and 
	easier for everyone. 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

	If I need to add something new and I know I will spend some time for testing, I'd better create a new 
	branch for it. Well, I will create a new branch every time I don't want to see something undone in master, 
	because it should represent the maximum quality and completeness of the current version.
